generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  role      String    @default("employee")

  TimeLog   TimeLog[]

  createdTickets  Ticket[] @relation("CreatedTickets")
  assignedTickets Ticket[] @relation("AssignedTickets")
  ticketingComments TicketingComment[]
}

model TimeLog {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  clockIn   DateTime
  clockOut  DateTime?
  note      String?
  createdAt DateTime  @default(now())
  isDeleted Boolean   @default(false)
}


model Ticket {
  id              String      @id @default(uuid())
  title           String
  description     String
  priority        TicketPriority
  status          TicketStatus
  type            TicketType
  createdById     Int
  createdBy       User        @relation("CreatedTickets", fields: [createdById], references: [id])
  assignedToId    Int?
  assignedTo      User?       @relation("AssignedTickets", fields: [assignedToId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  closedAt        DateTime?
  deadline        DateTime?

  comments TicketingComment[]
  
  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([createdAt])
}

model TicketingComment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REJECTED
}

enum TicketType {
  BUG
  FEATURE
  SUPPORT
  PAYMENT
  OTHER
}

